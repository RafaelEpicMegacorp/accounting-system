// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  companies Company[]

  @@map("users")
}

model Company {
  id              String   @id @default(cuid())
  userId          String   // Link to user who owns this company
  name            String
  legalName       String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  taxCode         String?
  email           String
  phone           String?
  website         String?
  logo            String?
  signature       String?
  
  // Banking Information
  bankAccount     String?
  iban            String?
  bicSwift        String?
  
  // Multi-company support
  defaultCurrency Currency @default(USD)
  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices               Invoice[]
  paymentMethods         PaymentMethod[]
  recurringSubscriptions RecurringSubscription[]

  // Indexes
  @@index([userId])
  @@index([userId, isDefault])
  @@map("companies")
}

model Client {
  id                  String   @id @default(cuid())
  name                String
  company             String?
  email               String   @unique // Keep as primary email for backwards compatibility
  
  // Enhanced contact management
  primaryContactName  String?
  primaryContactEmail String?
  ccEmails            String[] // Array of CC email addresses
  
  phone               String?
  address             String?
  city                String?
  state               String?
  country             String?
  postalCode          String?
  vatNumber           String?
  registrationNumber  String?
  
  // Client preferences
  preferredCurrency   Currency @default(USD)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  orders                 Order[]
  invoices               Invoice[]
  recurringSubscriptions RecurringSubscription[]

  // Indexes for performance
  @@index([name])
  @@index([email])
  @@index([primaryContactEmail])
  @@index([company])
  @@index([createdAt])
  @@map("clients")
}

enum ServiceCategory {
  CONTENT_MARKETING
  PODCAST_SPONSORSHIP
  SOCIAL_MEDIA
  ADVERTISING
  CREATIVE_SERVICES
  PLATFORM_MANAGEMENT
  OTHER
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

model ServiceLibrary {
  id           String          @id @default(cuid())
  name         String
  description  String?
  category     ServiceCategory
  defaultPrice Float?
  
  // Recurring billing support
  isRecurring  Boolean       @default(false)
  billingCycle BillingCycle?
  billingDay   Int?          // Day of month (1-31) for monthly billing
  
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  invoiceItems          InvoiceItem[]
  recurringSubscriptions RecurringSubscription[]

  // Indexes
  @@index([category])
  @@index([isRecurring])
  @@index([isActive])
  @@map("service_library")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  PAID_IN_ADVANCE
}

model RecurringSubscription {
  id              String             @id @default(cuid())
  clientId        String
  serviceId       String
  companyId       String             // Which company is providing the service
  
  // Billing details
  price           Float
  currency        Currency           @default(USD)
  billingDay      Int                // Day of month for billing (1-31)
  
  // Subscription lifecycle
  startDate       DateTime
  nextBillingDate DateTime
  endDate         DateTime?          // Optional end date
  status          SubscriptionStatus @default(ACTIVE)
  
  // Payment tracking
  isPaidInAdvance Boolean            @default(false)
  advancePaidUntil DateTime?         // Date until which it's paid in advance
  
  // Notes and metadata
  notes           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  client  Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service ServiceLibrary @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  company Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([clientId])
  @@index([serviceId])
  @@index([companyId])
  @@index([status])
  @@index([nextBillingDate])
  @@index([status, nextBillingDate])
  @@map("recurring_subscriptions")
}

enum PaymentMethodType {
  CRYPTO_WALLET
  BANK_ACCOUNT
  OTHER
}

model PaymentMethod {
  id        String            @id @default(cuid())
  companyId String
  type      PaymentMethodType
  name      String            // e.g., "ETH Wallet", "Main Bank Account"
  details   Json              // Flexible storage for wallet addresses, IBAN, etc.
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

enum OrderFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  CUSTOM
}

enum OrderStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

model Order {
  id              String         @id @default(cuid())
  clientId        String
  description     String
  amount          Float
  frequency       OrderFrequency
  status          OrderStatus    @default(ACTIVE)
  startDate       DateTime
  nextInvoiceDate DateTime
  customDays      Int?           // For custom frequency
  leadTimeDays    Int?           // Override global lead time
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  // Indexes for performance
  @@index([clientId])
  @@index([status])
  @@index([nextInvoiceDate])
  @@index([createdAt])
  @@index([status, nextInvoiceDate])
  @@map("orders")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum Currency {
  USD
  EUR
  GBP
  BTC
  ETH
}

model Invoice {
  id            String        @id @default(cuid())
  orderId       String?       // Optional for manual invoices
  clientId      String
  companyId     String
  invoiceNumber String        @unique
  amount        Float
  currency      Currency      @default(USD)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  sentDate      DateTime?
  paidDate      DateTime?
  status        InvoiceStatus @default(DRAFT)
  notes         String?
  pdfPath       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order            Order?            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  client           Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items            InvoiceItem[]
  paymentReminders PaymentReminder[]
  payments         Payment[]

  // Indexes for performance
  @@index([clientId])
  @@index([companyId])
  @@index([status])
  @@index([dueDate])
  @@index([issueDate])
  @@index([invoiceNumber])
  @@index([status, dueDate])
  @@index([clientId, status])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  serviceId   String?  // Optional reference to service library
  name        String
  description String?
  quantity    Int      @default(1)
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())

  // Relations
  invoice Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service ServiceLibrary? @relation(fields: [serviceId], references: [id])

  @@map("invoice_items")
}

enum PaymentType {
  BANK_TRANSFER
  CREDIT_CARD
  CHECK
  CASH
  CRYPTO
  OTHER
}

model Payment {
  id        String      @id @default(cuid())
  invoiceId String
  amount    Float
  method    PaymentType
  paidDate  DateTime    @default(now())
  notes     String?
  createdAt DateTime    @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum ReminderType {
  PRE_DUE
  DUE_DATE
  OVERDUE_3_DAYS
  OVERDUE_7_DAYS
  OVERDUE_14_DAYS
  CUSTOM
}

model PaymentReminder {
  id           String       @id @default(cuid())
  invoiceId    String
  reminderType ReminderType
  sentDate     DateTime     @default(now())
  emailSent    Boolean      @default(false)
  createdAt    DateTime     @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payment_reminders")
}

enum EmailTemplateType {
  INVOICE
  REMINDER
  PAYMENT_CONFIRMATION
  WELCOME
}

model EmailTemplate {
  id        String            @id @default(cuid())
  name      String
  type      EmailTemplateType
  subject   String
  body      String // HTML content
  isDefault Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("email_templates")
}

model Settings {
  id                    String  @id @default(cuid())
  companyName           String
  companyAddress        String?
  companyEmail          String
  companyPhone          String?
  companyLogo           String?
  invoiceNumberPrefix   String  @default("INV")
  defaultLeadTimeDays   Int     @default(3)
  defaultDueDateDays    Int     @default(30)
  defaultPaymentTerms   String  @default("Net 30")
  enableEmailReminders  Boolean @default(true)
  reminderDaysBefore    Int     @default(3)
  reminderDaysOverdue   String  @default("3,7,14") // Comma-separated
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // CREATE, UPDATE, DELETE, etc.
  entity    String   // client, order, invoice, etc.
  entityId  String
  oldData   Json?
  newData   Json?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}